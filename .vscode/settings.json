{
	// system
	// # For VS Code
	// defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false
	// defaults delete -g ApplePressAndHoldEnabled
	// defaults write -g ApplePressAndHoldEnabled -bool false
	// "telemetry.enableTelemetry": false,
	"telemetry.telemetryLevel": "off",
	// "telemetry.enableCrashReporter": false,

	// apperance
	"terminal.integrated.defaultLocation": "editor",
	"workbench.startupEditor": "none",
	"workbench.sideBar.location": "right",
	"workbench.activityBar.location": "bottom",
	"workbench.editor.showTabs": "multiple",
	"workbench.tree.enableStickyScroll": false,
	"workbench.tree.renderIndentGuides": "none",
	"workbench.tree.indent": 8,
	"workbench.panel.showLabels": false,
	"workbench.panel.defaultLocation": "right",
	"workbench.editor.empty.hint": "hidden",
	// editor

	"workbench.colorTheme": "Gruvbox Dark Hard",
	"vscode-neovim.neovimInitVimPaths.darwin": "$HOME/.config/nvim/init.lua",
	"security.allowedUNCHosts": ["wsl.localhost"],
	"window.commandCenter": false,
	"editor.fontFamily": "Hack Nerd font, Roboto, RobotoMono Nerd Font ",
	"editor.fontSize": 16,
	"editor.rulers": [
		{
			"column": 120,
			"color": "#2b2b2b"
		}
	],
	"editor.minimap.enabled": false,
	"editor.wordSeparators": "`~!@#$%^&*()=+[{]}\\|;:'\",.<>/?",
	"editor.semanticHighlighting.enabled": "configuredByTheme",
	"editor.cursorBlinking": "phase",
	"editor.cursorSmoothCaretAnimation": "off",
	"editor.renderLineHighlight": "none",
	"editor.hover.delay": 20,

	//"projectManager.projectsLocation": "~/.dotfiles/.vscode",
	// scroll bar

	"editor.scrollbar.horizontal": "hidden",
	"editor.scrollbar.vertical": "hidden",
	"workbench.list.smoothScrolling": false,
	"editor.hideCursorInOverviewRuler": true,
	// "editor.overviewRulerBorder": true,
	"editor.tabSize": 2,
	"editor.insertSpaces": true,
	"editor.occurrencesHighlight": "off",
	"editor.lightbulb.enabled": "off",
	"editor.selectionHighlight": false,

	"editor.copyWithSyntaxHighlighting": false,
	"diffEditor.ignoreTrimWhitespace": false,
	"editor.emptySelectionClipboard": false,
	"workbench.editor.enablePreview": false,
	"diffEditor.renderSideBySide": false,
	"editor.snippetSuggestions": "top",
	"editor.detectIndentation": true,
	"files.insertFinalNewline": true,
	"files.trimFinalNewlines": true,
	"editor.guides.indentation": true,
	"editor.stickyScroll.enabled": false,
	"editor.autoClosingBrackets": "never",
	"editor.autoClosingQuotes": "never",

	// trim whitespace
	"files.trimTrailingWhitespace": true,
	"editor.renderWhitespace": "trailing",
	"editor.renderControlCharacters": true,
	"editor.formatOnSave": false,
	"editor.accessibilitySupport": "off",
	"workbench.tips.enabled": false,

	// color decorations
	"editor.colorDecorators": true,
	"git.decorations.enabled": false,
	"problems.decorations.enabled": false,
	"editor.matchBrackets": "near",
	"editor.bracketPairColorization.enabled": true,

	// "editor.guides.bracketPairs": "active",
	// "editor.gotoLocation.multipleReferences": "goto",
	// "editor.gotoLocation.multipleDefinitions": "goto",
	// "editor.gotoLocation.multipleDeclarations": "goto",
	// "workbench.editor.enablePreviewFromQuickOpen": false,
	// "editor.gotoLocation.multipleImplementations": "goto",
	// "editor.gotoLocation.multipleTypeDefinitions": "goto",

	// error
	"errorLens.enabled": true,
	"errorLens.editorHoverPartsEnabled": {
		"messageEnabled": false,
		"sourceCodeEnabled": false,
		"buttonsEnabled": false
	},
	"errorLens.delay": 1000,
	"errorLens.followCursor": "activeLine",
	"errorLens.gutterIconsEnabled": true,
	"errorLens.messageBackgroundMode": "message",

	"errorLens.exclude": ["**/*.txt", "**/dist/**"],
	// wrap
	"editor.wordWrap": "on",
	"editor.wordWrapColumn": 150,
	"editor.wrappingIndent": "none",
	/** explorer ***********************************************************************************/
	"explorer.compactFolders": true,
	"explorer.sortOrder": "type",
	"explorer.decorations.colors": false,
	/** terminal settings **************************************************************************/
	"terminal.integrated.gpuAcceleration": "auto",
	"terminal.integrated.fontSize": 14,
	//   "terminal.integrated.allowChords": true,
	//   "terminal.integrated.defaultLocation": "view",
	"terminal.integrated.tabs.enabled": false,
	"terminal.integrated.fontFamily": "RobotMono Nerd Font",
	/** misc     **********************************************************************************/
	"extensions.ignoreRecommendations": true,
	"extensions.autoUpdate": false,
	"files.autoSave": "off",
	// editor
	"editor.lineNumbers": "relative",
	// search
	// "find-it-faster.general.killTerminalAfterUse": true,
	// "find-it-faster.general.useTerminalInEditor": false,

	// check here https://github.com/VSCodeVim/Vim
	// vim settings
	"vim.easymotion": true,
	"vim.incsearch": true,
	"vim.useSystemClipboard": true,
	"vim.useCtrlKeys": false,
	"vim.hlsearch": true,
	"vim.autoindent": true,
	"vim.surround": true,
	"vim.leader": "space",
	"vim.history": 2000,
	"vim.statusBarColorControl": false,
	"vim.showcmd": true,
	"vim.gdefault": false, // :substitute flag 'g' is enabled by default to replace all matches in a line.
	"vim.ignorecase": true, // Ignore case in search patterns.
	"vim.inccommand": "replace", // Display :substitute command effects while typing.
	"vim.joinspaces": true, // Add two spaces after '.', '?', or '!' when joining lines.
	"vim.maxmapdepth": 1000, // Maximum recursive mapping depth to prevent endless loops.
	"vim.report": 2, // Minimum number of lines changed to trigger a report.
	// "vim.shell": "/bin/sh",               // Path to the shell for `!` and `:!` commands.
	"vim.showmodename": true, // Display the current mode name in the status bar.
	"vim.smartcase": true, // Override ignorecase if the search contains uppercase letters.
	"vim.textwidth": 120, // Maximum width for text wrapping with `gq`.
	"vim.timeout": 1000, // Timeout (in milliseconds) for remapped commands.
	"vim.whichwrap": "b,s", // Allow cursor to wrap to the next/previous line with certain keys.
	"vim.smartRelativeLine": true,
	"vim.highlightedyank.enable": true,
	"vim.highlightedyank.color": "#f6c177",
	"vim.highlightedyank.duration": 120,
	"extensions.experimental.affinity": {
		"vscodevim.vim": 1,
		"asvetliakov.vscode-neovim": 1
	},
	"vim.replaceWithRegister": true,
	// "vim.sneak": true,
	// "vim.sneakUseIgnorecaseAndSmartcase": true,

	"vim.handleKeys": {
		"<C-d>": true,
		"<C-u>": true,
		"<C-j>": true,
		"<C-k>": true,
		"<->": true,
		"<_>": true,
		"<C-f>": true
		//     "<C-e>": false,
		//     "<C-h>": true,
		//     "<C-l>": false,
		//     "<C-y>": false,
		//     "<C-s>": false,
		//     "<C-w>": false,
	},
	// lsp
	// formatter
	"editor.defaultFormatter": "",
	// json
	"[jsonc]": {
		"editor.tabSize": 2,
		"editor.insertSpaces": true,
		"editor.defaultFormatter": "esbenp.prettier-vscode"
	},
	"[json]": {
		"editor.tabSize": 2,
		"editor.insertSpaces": true,
		"editor.defaultFormatter": "esbenp.prettier-vscode"
	},
	"[typescriptreact]": {
		"editor.defaultFormatter": "biomejs.biome"
	},

	// keybindings
	// normal mode
	"vim.normalModeKeyBindingsNonRecursive": [
		// show whichkey
		{
			"before": ["<space>"],
			"commands": ["whichkey.show"]
		},
		{
			"before": ["<Esc>"],
			"commands": [":nohl"]
		},
		{
			"before": ["<C-c>"],
			"commands": [":nohl"]
		},
		// formatting
		{
			"before": ["<C-m>"],
			"commands": ["editor.action.formatDocument"]
		},
		// fold
		{
			"before": ["<Tab>"],
			"after": ["z", "a"]
		},
		// center the cursor when using C-d and C-u
		{
			"before": ["<C-d>"],
			"after": ["<C-d>", "z", "z"]
		},
		{
			"before": ["<C-u>"],
			"after": ["<C-u>", "z", "z"]
		},
		// toggle comment selection
		{
			"before": ["-"],
			"after": ["g", "c", "c", "<C-c>"]
		},
		{
			"before": ["_"],
			"after": ["g", "C", "<C-c>"]
		},
		// spell suggestion
		{
			"before": ["z", "="],
			"commands": ["cSpell.suggestSpellingCorrections"]
		}
	],

	// Visual mode
	"vim.visualModeKeyBindingsNonRecursive": [
		// Stay in visual mode while indenting
		{
			"before": ["<"],
			"after": ["<", "g", "v", "^"]
		},
		{
			"before": [">"],
			"after": [">", "g", "v", "^"]
		},
		// Move selected lines while staying in visual mode
		{
			"before": ["J"],
			"commands": ["editor.action.moveLinesDownAction"]
		},
		{
			"before": ["K"],
			"commands": ["editor.action.moveLinesUpAction"]
		},
		// toggle comment selection
		{
			"before": ["-"],
			"after": ["g", "c", "<C-c>"]
		},
		{
			"before": ["_"],
			"after": ["g", "C", "<C-c>"]
		}
	],
	"vim.insertModeKeyBindings": [
		{
			"before": ["j", "k"],
			"after": ["<Esc>"]
		}
	],
	// Whichkey keybinding
	"whichkey.delay": 0,
	"whichkey.bindings": [
		{
			"key": ",",
			"name": "formatDocument",
			"command": "editor.action.formatDocument",
			"when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
		},
		// lsp setting
		{
			"key": "r",
			"name": "refactor",
			"command": "editor.action.refactor",
			"when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
		},
		// file tree
		// {
		// 	"key": "e",
		// 	"name": "toggle file tree",
		// 	"type": "command",
		// 	"command": "runCommands",
		// 	"args": {
		// 		"commands": ["workbench.action.toggleSidebarVisibility", "workbench.files.action.focusFilesExplorer"],
		// 		"when": "vim.mode == 'Normal' && !sideBarFocus && (editorTextFocus || !inputFocus)"
		// 	}
		// },
		// find file
		{
			"key": "f",
			"name": "find files",
			"type": "bindings",
			"bindings": [
				{
					"key": "f",
					"name": "find file",
					"type": "command",
					"command": "workbench.action.quickOpen"
				},
				{
					"key": "p",
					"name": "fzf find file with preview",
					"type": "command",
					"command": "find-it-faster.findFiles"
				},
				{
					"key": "l",
					"name": "live rigrep in project",
					"type": "command",
					"command": "find-it-faster.findWithinFiles"
				}
			]
		},
    {
      "key": "d",
      "name": "open netrew",
      "type": "bindings",
      "bindings": [
        {
          "key": "d",
          "name": "open netrw",
          "type": "command",
          "command": "vsnetrw.open",
          "when": "!activeEditor"
        }
      ]
    },
//     // project/workspace
//     {
//       "key": "p",
//       "name": "Project",
//       "type": "bindings",
//       "bindings": [
//         {
//           "key": "p",
//           "name": "open project list",
//           "type": "command",
//           "command": "projectManager.listProjects"
//         },
//         {
//           "key": "s",
//           "name": "open project save",
//           "type": "command",
//           "command": "projectManager.saveProject"
//         },
//         {
//           "key": "b",
//           "name": "open project side bar",
//           "type": "command",
//           "command": "_projectManager.openSideBar"
//         },
//         {
//           "key": "n",
//           "name": "open project in new window",
//           "type": "command",
//           "command": "projectManager.listProjectsNewWindow"
//         }
//       ]
//     },
    // Buffer
    {
      "key": "q",
      "name": "Close current buffer",
      "type": "commands",
      "command": "workbench.action.closeActiveEditor"
    },
    {
      "key": "b",
      "name": "Buffer/Bookmarks",
      "type": "bindings",
      "bindings": [
        {
          "key": "b",
          "name": "Show all buffers",
          "type": "commands",
          "command": "workbench.action.showAllEditors"
        },
        {
          "key": "K",
          "name": "Close all other buffer",
          "type": "commands",
          "command": "workbench.action.closeOtherEditors"
        }
      ]
    },

    // markdown
    // NOTE: https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced
    {
      "key": "m",
      "name": "Markdown",
      "type": "bindings",
      "bindings": [
        {
          "key": "p",
          "name": "preview to the side",
          "type": "command",
          "command": "markdown-preview-enhanced.openPreviewToTheSide",
          "when": "!notebookEditorFocused && editorLangId == 'markdown'"
        },
        {
          "key": "g",
          "name": "github theme preview to the side",
          "type": "command",
          "command": "markdown.showPreviewToSide",
          "when": "!notebookEditorFocused && editorLangId == 'markdown'"
        },
        // BUG:
        {
          "key": "k",
          "name": "kill the preview",
          "type": "command",
          "command": "runCommands",
          "args": {
            "commands": [
              "workbench.action.navigateLeft",
              "workbench.action.closeActiveEditor"
            ]
            // "when": "!notebookEditorFocused && editorLangId == 'markdown'"
          }
        },
        {
          "key": "b",
          "name": "toggle bold",
          "type": "command",
          "command": "markdown.extension.editing.toggleBold",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
        },
        {
          "key": "i",
          "name": "toggle italic",
          "type": "command",
          "command": "markdown.extension.editing.toggleItalic",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
        },
        {
          "key": "s",
          "name": "toggle strikethrough",
          "type": "command",
          "command": "markdown.extension.editing.toggleStrikethrough",
          "when": "false"
        }
      ]
    },
    // System
    {
      "key": ":",
      "name": "show command",
      "type": "command",
      "command": "workbench.action.showCommands"
    },
	]
}
